{"version":3,"file":"static/js/502.04ebbd34.chunk.js","mappings":"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","sources":["Components/ProductDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { request, gql } from 'graphql-request';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useCategory } from '../context/CategoryContext';\r\nimport './ProductDetails.css';\r\nimport { useCart } from '../context/CartContext';\r\n\r\nconst ProductDetails = ({ openCartOverlay }) => {\r\n  const { id } = useParams();\r\n  const [product, setProduct] = useState(null);\r\n  const [mainImage, setMainImage] = useState(null);\r\n  const [selectedCapacity, setSelectedCapacity] = useState(null);\r\n  const [selectedUSBPorts, setSelectedUSBPorts] = useState(null);\r\n  const [selectedTouchID, setSelectedTouchID] = useState(null);\r\n  const [selectedSize, setSelectedSize] = useState(null);\r\n  const [selectedColor, setSelectedColor] = useState(null);\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n  const { activeCategory, setActiveCategory } = useCategory(); // Get activeCategory and setActiveCategory\r\n  const navigate = useNavigate();\r\n  const { addToCart } = useCart();\r\n\r\n  useEffect(() => {\r\n    const fetchProductDetails = async () => {\r\n      const endpoint = 'http://localhost:8000/graphql.php';\r\n\r\n      const query = gql`\r\n        query($id: String!) {\r\n          products(id: $id) {\r\n            id\r\n            name\r\n            description\r\n            inStock\r\n            galleries {\r\n              imageUrl\r\n            }\r\n            prices {\r\n              amount\r\n              currencyLabel\r\n              currencySymbol\r\n            }\r\n            attributes {\r\n              name\r\n              type\r\n              items {\r\n                id\r\n                display_value\r\n                value\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `;\r\n\r\n      try {\r\n        const data = await request(endpoint, query, { id });\r\n        const productData = data.products.find((product) => product.id === id);\r\n        if (productData) {\r\n          setProduct(productData);\r\n          setMainImage(productData?.galleries[0]?.imageUrl);\r\n        } else {\r\n          console.error('Product not found');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching product details:', error);\r\n      }\r\n    };\r\n\r\n    fetchProductDetails();\r\n  }, [id]);\r\n\r\n  const handleAddToCart = () => {\r\n    const productToAdd = {\r\n      id: product.id,\r\n      name: product.name,\r\n      price: product.prices[0].amount,\r\n      currencySymbol: product.prices[0].currencySymbol,\r\n      selectedSize,\r\n      selectedColor,\r\n      selectedCapacity,\r\n      selectedUSBPorts,\r\n      selectedTouchID,\r\n      imageUrl: product.galleries[0].imageUrl,\r\n  \r\n      // Fetch available attributes dynamically\r\n      availableSizes: product.attributes\r\n        .filter(attr => attr.name === 'Size')\r\n        .flatMap(attr => attr.items.map(item => item.value)),\r\n        \r\n      availableColors: product.attributes\r\n        .filter(attr => attr.name === 'Color')\r\n        .flatMap(attr => attr.items.map(item => item.value)),\r\n  \r\n      availableCapacities: product.attributes\r\n        .filter(attr => attr.name === 'Capacity')\r\n        .flatMap(attr => attr.items.map(item => item.display_value)),\r\n  \r\n      availableUSBPorts: product.attributes\r\n        .filter(attr => attr.name === 'With USB 3 ports')\r\n        .flatMap(attr => attr.items.map(item => item.display_value)),\r\n  \r\n      availableTouchIDOptions: product.attributes\r\n        .filter(attr => attr.name === 'Touch ID in keyboard')\r\n        .flatMap(attr => attr.items.map(item => item.display_value)),\r\n    };\r\n  \r\n    addToCart(productToAdd);\r\n    openCartOverlay();\r\n  };\r\n\r\n  const handleCapacitySelect = (capacity) => {\r\n    setSelectedCapacity(capacity);\r\n  };\r\n\r\n  const handleUSBPortsSelect = (usbPorts) => {\r\n    setSelectedUSBPorts(usbPorts);\r\n  };\r\n\r\n  const handleTouchIDSelect = (touchID) => {\r\n    setSelectedTouchID(touchID);\r\n  };\r\n\r\n  const handleSizeSelect = (size) => {\r\n    setSelectedSize(size);\r\n  };\r\n\r\n  const handleColorSelect = (color) => {\r\n    setSelectedColor(color);\r\n  };\r\n\r\n  const handleImageSelect = (imageUrl, index) => {\r\n    setMainImage(imageUrl);\r\n    setCurrentImageIndex(index);  // Keep index in sync for arrows\r\n  };\r\n\r\n  // Handle next image with arrow\r\n  const handleNextImage = () => {\r\n    const newIndex = (currentImageIndex + 1) % product.galleries.length;\r\n    setCurrentImageIndex(newIndex);\r\n    setMainImage(product.galleries[newIndex].imageUrl);  // Update mainImage when arrow is clicked\r\n  };\r\n\r\n  // Handle previous image with arrow\r\n  const handlePrevImage = () => {\r\n    const newIndex = (currentImageIndex - 1 + product.galleries.length) % product.galleries.length;\r\n    setCurrentImageIndex(newIndex);\r\n    setMainImage(product.galleries[newIndex].imageUrl);  // Update mainImage when arrow is clicked\r\n  };\r\n\r\n  if (!product) return <div>Loading...</div>;\r\n\r\n  // Dynamically determine if Add to Cart button should be disabled\r\n  const isAddToCartDisabled = !product.inStock || \r\n                              (!selectedCapacity && product.attributes.some(attr => attr.name === 'Capacity')) ||\r\n                              (!selectedUSBPorts && product.attributes.some(attr => attr.name === 'With USB 3 ports')) ||\r\n                              (!selectedTouchID && product.attributes.some(attr => attr.name === 'Touch ID in keyboard')) ||\r\n                              (!selectedSize && product.attributes.some(attr => attr.name === 'Size')) ||\r\n                              (!selectedColor && product.attributes.some(attr => attr.name === 'Color'));\r\n\r\n  return (\r\n    <div className=\"product-details-container\">\r\n      <div className=\"product-gallery-section\" data-testid=\"product-gallery\">\r\n        <div className=\"image-thumbnails\">\r\n          {product.galleries.map((gallery, index) => (\r\n            <img\r\n              key={index}\r\n              src={gallery.imageUrl}\r\n              alt={`Thumbnail ${index}`}\r\n              onClick={() => handleImageSelect(gallery.imageUrl, index)}\r\n              className={`thumbnail ${mainImage === gallery.imageUrl ? 'selected' : ''}`}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"product-slider-section\">\r\n        <div className=\"main-image-box\">\r\n          <button className=\"prev-button\" onClick={handlePrevImage}>\r\n            &#8249;\r\n          </button>\r\n          <img src={mainImage} alt=\"Main Product\" />\r\n          <button className=\"next-button\" onClick={handleNextImage}>\r\n            &#8250;\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"product-info\">\r\n        <h2>{product.name}</h2>\r\n        <p>{`${product.prices[0].currencySymbol}${product.prices[0].amount.toFixed(2)}`}</p>\r\n\r\n        {/* Render only the available attributes */}\r\n        {product.attributes?.length > 0 ? (\r\n          <>\r\n            {/* Capacity Options */}\r\n            {product.attributes.some(attr => attr.name === 'Capacity') && (\r\n              <div className=\"product-attribute\" data-testid=\"product-attribute-capacity\">\r\n                <label>Capacity:</label>\r\n                <div className=\"capacity-options\">\r\n                  {product.attributes\r\n                    ?.filter(attr => attr.name === 'Capacity')\r\n                    .flatMap(attr => attr.items)\r\n                    .map((item) => (\r\n                      <button\r\n                        key={item.id}\r\n                        className={selectedCapacity === item.value ? 'selected' : ''}\r\n                        onClick={() => handleCapacitySelect(item.value)}\r\n                      >\r\n                        {item.display_value}\r\n                      </button>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* USB 3 Ports Options */}\r\n            {product.attributes.some(attr => attr.name === 'With USB 3 ports') && (\r\n              <div className=\"product-attribute\" data-testid=\"product-attribute-with-usb-3-ports\">\r\n                <label>With USB 3 Ports:</label>\r\n                <div className=\"usb-ports-options\">\r\n                  {product.attributes\r\n                    ?.filter(attr => attr.name === 'With USB 3 ports')\r\n                    .flatMap(attr => attr.items)\r\n                    .map((item) => (\r\n                      <button\r\n                        key={item.id}\r\n                        className={selectedUSBPorts === item.value ? 'selected' : ''}\r\n                        onClick={() => handleUSBPortsSelect(item.value)}\r\n                      >\r\n                        {item.display_value}\r\n                      </button>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Touch ID Options */}\r\n            {product.attributes.some(attr => attr.name === 'Touch ID in keyboard') && (\r\n              <div className=\"product-attribute\" data-testid=\"product-attribute-touch-id-in-keyboard\">\r\n                <label>Touch ID in keyboard:</label>\r\n                <div className=\"touch-id-options\">\r\n                  {product.attributes\r\n                    ?.filter(attr => attr.name === 'Touch ID in keyboard')\r\n                    .flatMap(attr => attr.items)\r\n                    .map((item) => (\r\n                      <button\r\n                        key={item.id}\r\n                        className={selectedTouchID === item.value ? 'selected' : ''}\r\n                        onClick={() => handleTouchIDSelect(item.value)}\r\n                      >\r\n                        {item.display_value}\r\n                      </button>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Size Options */}\r\n            {product.attributes.some(attr => attr.name === 'Size') && (\r\n              <div className=\"product-attribute\" data-testid=\"product-attribute-size\">\r\n                <label>Size:</label>\r\n                <div className=\"size-options\">\r\n                  {product.attributes\r\n                    ?.filter(attr => attr.name === 'Size')\r\n                    .flatMap(attr => attr.items)\r\n                    .map((item) => (\r\n                      <button\r\n                        key={item.id}\r\n                        className={selectedSize === item.value ? 'selected' : ''}\r\n                        onClick={() => handleSizeSelect(item.value)}\r\n                      >\r\n                        {item.value}\r\n                      </button>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Color Options */}\r\n            {product.attributes.some(attr => attr.name === 'Color') && (\r\n              <div className=\"product-attribute\" data-testid=\"product-attribute-color\">\r\n                <label>Color:</label>\r\n                <div className=\"color-option\">\r\n                  {product.attributes\r\n                    ?.filter(attr => attr.name === 'Color')\r\n                    .flatMap(attr => attr.items)\r\n                    .map((item) => (\r\n                      <button\r\n                        key={item.id}\r\n                        className={`color-switch ${selectedColor === item.value ? 'selected' : ''}`}\r\n                        style={{ backgroundColor: item.value }}\r\n                        onClick={() => handleColorSelect(item.value)}\r\n                      />\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <p></p>\r\n        )}\r\n\r\n        <button\r\n          className={`add-to-cart-button ${isAddToCartDisabled ? 'disabled' : ''}`}\r\n          data-testid=\"add-to-cart\"\r\n          disabled={isAddToCartDisabled}\r\n          onClick={handleAddToCart}\r\n        >\r\n          Add to Cart\r\n        </button>\r\n\r\n        <div className=\"product-description\" data-testid=\"product-description\">\r\n          {product.description}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n"],"names":["_ref","_product$attributes","_product$attributes2","_product$attributes3","_product$attributes4","_product$attributes5","_product$attributes6","openCartOverlay","id","useParams","product","setProduct","useState","mainImage","setMainImage","selectedCapacity","setSelectedCapacity","selectedUSBPorts","setSelectedUSBPorts","selectedTouchID","setSelectedTouchID","selectedSize","setSelectedSize","selectedColor","setSelectedColor","currentImageIndex","setCurrentImageIndex","activeCategory","setActiveCategory","useCategory","addToCart","useNavigate","useCart","useEffect","async","query","gql","productData","request","products","find","_productData$gallerie","galleries","imageUrl","console","error","fetchProductDetails","_jsx","children","isAddToCartDisabled","inStock","attributes","some","attr","name","_jsxs","className","map","gallery","index","src","alt","onClick","handleImageSelect","handlePrevImage","newIndex","length","handleNextImage","prices","currencySymbol","amount","toFixed","_Fragment","filter","flatMap","items","item","value","handleCapacitySelect","capacity","display_value","handleUSBPortsSelect","usbPorts","handleTouchIDSelect","touchID","handleSizeSelect","size","style","backgroundColor","handleColorSelect","color","disabled","handleAddToCart","productToAdd","price","availableSizes","availableColors","availableCapacities","availableUSBPorts","availableTouchIDOptions","description"],"sourceRoot":""}