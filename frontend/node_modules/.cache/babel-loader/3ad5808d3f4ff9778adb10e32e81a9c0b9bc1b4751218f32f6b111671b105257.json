{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yasse\\\\Desktop\\\\temp\\\\ecommerceproject\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context for the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the CartContext\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]);\n\n  // Load cart from localStorage on initial load\n  useEffect(() => {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      setCartItems(JSON.parse(storedCart));\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Helper to calculate total number of items\n  const getTotalItems = () => cartItems.reduce((sum, item) => sum + item.quantity, 0);\n\n  // Helper to calculate total price\n  const getTotalPrice = () => cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n\n  // Add item to cart\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      const existingItemIndex = prevItems.findIndex(item => item.id === product.id && item.selectedSize === product.selectedSize && item.selectedColor === product.selectedColor && item.selectedCapacity === product.selectedCapacity && item.selectedTouchID === product.selectedTouchID && item.selectedUSBPorts === product.selectedUSBPorts);\n      if (existingItemIndex > -1) {\n        // Item already exists, increase quantity\n        const updatedItems = [...prevItems];\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + 1\n        };\n        return updatedItems;\n      }\n\n      // New item, add to cart\n      return [...prevItems, {\n        ...product,\n        quantity: 1\n      }];\n    });\n  };\n\n  // Remove item from cart or decrease quantity\n  const removeFromCart = (id, size, color, capacity, touchID, usbPorts) => {\n    setCartItems(prevItems => {\n      const existingItemIndex = prevItems.findIndex(item => item.id === id && item.selectedSize === size && item.selectedColor === color && item.selectedCapacity === capacity && item.selectedTouchID === touchID && item.selectedUSBPorts === usbPorts);\n      if (existingItemIndex > -1) {\n        const updatedItems = [...prevItems];\n        const item = updatedItems[existingItemIndex];\n        if (item.quantity > 1) {\n          // Decrease quantity\n          updatedItems[existingItemIndex] = {\n            ...item,\n            quantity: item.quantity - 1\n          };\n        } else {\n          // Remove item completely if quantity is 1\n          updatedItems.splice(existingItemIndex, 1);\n        }\n        return updatedItems;\n      }\n      return prevItems;\n    });\n  };\n\n  // Update attributes of a cart item\n  const updateCartItemAttributes = (id, updatedAttributes) => {\n    setCartItems(prevItems => {\n      const itemIndex = prevItems.findIndex(item => item.id === id);\n      if (itemIndex !== -1) {\n        const updatedItems = [...prevItems];\n        updatedItems[itemIndex] = {\n          ...updatedItems[itemIndex],\n          ...updatedAttributes // Apply the updated attributes\n        };\n        return updatedItems;\n      }\n      return prevItems;\n    });\n  };\n\n  // Clear the cart after placing an order\n  const clearCart = () => {\n    setCartItems([]); // Clear the cart items\n    localStorage.removeItem('cart'); // Optionally clear from localStorage too\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      updateCartItemAttributes,\n      // Expose the new function\n      getTotalItems,\n      getTotalPrice,\n      clearCart // Expose clearCart function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"jdONvkEabzLc64SbXgqXBHRMg9M=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","getTotalItems","reduce","sum","item","quantity","getTotalPrice","price","addToCart","product","prevItems","existingItemIndex","findIndex","id","selectedSize","selectedColor","selectedCapacity","selectedTouchID","selectedUSBPorts","updatedItems","removeFromCart","size","color","capacity","touchID","usbPorts","splice","updateCartItemAttributes","updatedAttributes","itemIndex","clearCart","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yasse/Desktop/temp/ecommerceproject/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create a context for the cart\r\nconst CartContext = createContext();\r\n\r\n// Custom hook to use the CartContext\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  // Load cart from localStorage on initial load\r\n  useEffect(() => {\r\n    const storedCart = localStorage.getItem('cart');\r\n    if (storedCart) {\r\n      setCartItems(JSON.parse(storedCart));\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  // Helper to calculate total number of items\r\n  const getTotalItems = () => cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n\r\n  // Helper to calculate total price\r\n  const getTotalPrice = () => cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n\r\n  // Add item to cart\r\n  const addToCart = (product) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItemIndex = prevItems.findIndex(\r\n        (item) =>\r\n          item.id === product.id &&\r\n          item.selectedSize === product.selectedSize &&\r\n          item.selectedColor === product.selectedColor &&\r\n          item.selectedCapacity === product.selectedCapacity &&\r\n          item.selectedTouchID === product.selectedTouchID &&\r\n          item.selectedUSBPorts === product.selectedUSBPorts\r\n      );\r\n  \r\n      if (existingItemIndex > -1) {\r\n        // Item already exists, increase quantity\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[existingItemIndex] = {\r\n          ...updatedItems[existingItemIndex],\r\n          quantity: updatedItems[existingItemIndex].quantity + 1,\r\n        };\r\n        return updatedItems;\r\n      }\r\n  \r\n      // New item, add to cart\r\n      return [...prevItems, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  // Remove item from cart or decrease quantity\r\n  const removeFromCart = (id, size, color, capacity, touchID, usbPorts) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItemIndex = prevItems.findIndex(\r\n        (item) =>\r\n          item.id === id &&\r\n          item.selectedSize === size &&\r\n          item.selectedColor === color &&\r\n          item.selectedCapacity === capacity &&\r\n          item.selectedTouchID === touchID &&\r\n          item.selectedUSBPorts === usbPorts\r\n      );\r\n  \r\n      if (existingItemIndex > -1) {\r\n        const updatedItems = [...prevItems];\r\n        const item = updatedItems[existingItemIndex];\r\n  \r\n        if (item.quantity > 1) {\r\n          // Decrease quantity\r\n          updatedItems[existingItemIndex] = {\r\n            ...item,\r\n            quantity: item.quantity - 1,\r\n          };\r\n        } else {\r\n          // Remove item completely if quantity is 1\r\n          updatedItems.splice(existingItemIndex, 1);\r\n        }\r\n  \r\n        return updatedItems;\r\n      }\r\n  \r\n      return prevItems;\r\n    });\r\n  };\r\n\r\n  // Update attributes of a cart item\r\n  const updateCartItemAttributes = (id, updatedAttributes) => {\r\n    setCartItems((prevItems) => {\r\n      const itemIndex = prevItems.findIndex((item) => item.id === id);\r\n      if (itemIndex !== -1) {\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[itemIndex] = {\r\n          ...updatedItems[itemIndex],\r\n          ...updatedAttributes,  // Apply the updated attributes\r\n        };\r\n        return updatedItems;\r\n      }\r\n      return prevItems;\r\n    });\r\n  };\r\n\r\n  // Clear the cart after placing an order\r\n  const clearCart = () => {\r\n    setCartItems([]); // Clear the cart items\r\n    localStorage.removeItem('cart'); // Optionally clear from localStorage too\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems,\r\n        addToCart,\r\n        removeFromCart,\r\n        updateCartItemAttributes,  // Expose the new function\r\n        getTotalItems,\r\n        getTotalPrice,\r\n        clearCart, // Expose clearCart function\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}