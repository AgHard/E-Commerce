{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';// Create a context for the cart\nimport{jsx as _jsx}from\"react/jsx-runtime\";const CartContext=/*#__PURE__*/createContext();// Custom hook to use the CartContext\nexport const useCart=()=>useContext(CartContext);export const CartProvider=_ref=>{let{children}=_ref;const[cartItems,setCartItems]=useState([]);// Load cart from localStorage on initial load\nuseEffect(()=>{const storedCart=localStorage.getItem('cart');if(storedCart){setCartItems(JSON.parse(storedCart));}},[]);// Save cart to localStorage whenever it changes\nuseEffect(()=>{localStorage.setItem('cart',JSON.stringify(cartItems));},[cartItems]);// Helper to calculate total number of items\nconst getTotalItems=()=>cartItems.reduce((sum,item)=>sum+item.quantity,0);// Helper to calculate total price\nconst getTotalPrice=()=>cartItems.reduce((sum,item)=>sum+item.price*item.quantity,0);// Add item to cart\nconst addToCart=product=>{setCartItems(prevItems=>{const existingItemIndex=prevItems.findIndex(item=>item.id===product.id&&item.selectedSize===product.selectedSize&&item.selectedColor===product.selectedColor&&item.selectedCapacity===product.selectedCapacity&&item.selectedTouchID===product.selectedTouchID&&item.selectedUSBPorts===product.selectedUSBPorts);if(existingItemIndex>-1){// Item already exists, increase quantity\nconst updatedItems=[...prevItems];updatedItems[existingItemIndex]={...updatedItems[existingItemIndex],quantity:updatedItems[existingItemIndex].quantity+1};return updatedItems;}// New item, add to cart\nreturn[...prevItems,{...product,quantity:1}];});};// Remove item from cart or decrease quantity\nconst removeFromCart=(id,size,color,capacity,touchID,usbPorts)=>{setCartItems(prevItems=>{const existingItemIndex=prevItems.findIndex(item=>item.id===id&&item.selectedSize===size&&item.selectedColor===color&&item.selectedCapacity===capacity&&item.selectedTouchID===touchID&&item.selectedUSBPorts===usbPorts);if(existingItemIndex>-1){const updatedItems=[...prevItems];const item=updatedItems[existingItemIndex];if(item.quantity>1){// Decrease quantity\nupdatedItems[existingItemIndex]={...item,quantity:item.quantity-1};}else{// Remove item completely if quantity is 1\nupdatedItems.splice(existingItemIndex,1);}return updatedItems;}return prevItems;});};// Update attributes of a cart item\nconst updateCartItemAttributes=(id,updatedAttributes)=>{setCartItems(prevItems=>{const itemIndex=prevItems.findIndex(item=>item.id===id);if(itemIndex!==-1){const updatedItems=[...prevItems];updatedItems[itemIndex]={...updatedItems[itemIndex],...updatedAttributes// Apply the updated attributes\n};return updatedItems;}return prevItems;});};// Clear the cart after placing an order\nconst clearCart=()=>{setCartItems([]);// Clear the cart items\nlocalStorage.removeItem('cart');// Optionally clear from localStorage too\n};return/*#__PURE__*/_jsx(CartContext.Provider,{value:{cartItems,addToCart,removeFromCart,updateCartItemAttributes,// Expose the new function\ngetTotalItems,getTotalPrice,clearCart// Expose clearCart function\n},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","CartContext","useCart","CartProvider","_ref","children","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","getTotalItems","reduce","sum","item","quantity","getTotalPrice","price","addToCart","product","prevItems","existingItemIndex","findIndex","id","selectedSize","selectedColor","selectedCapacity","selectedTouchID","selectedUSBPorts","updatedItems","removeFromCart","size","color","capacity","touchID","usbPorts","splice","updateCartItemAttributes","updatedAttributes","itemIndex","clearCart","removeItem","Provider","value"],"sources":["C:/xampp/htdocs/ecommerceproject/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create a context for the cart\r\nconst CartContext = createContext();\r\n\r\n// Custom hook to use the CartContext\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  // Load cart from localStorage on initial load\r\n  useEffect(() => {\r\n    const storedCart = localStorage.getItem('cart');\r\n    if (storedCart) {\r\n      setCartItems(JSON.parse(storedCart));\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  // Helper to calculate total number of items\r\n  const getTotalItems = () => cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n\r\n  // Helper to calculate total price\r\n  const getTotalPrice = () => cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n\r\n  // Add item to cart\r\n  const addToCart = (product) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItemIndex = prevItems.findIndex(\r\n        (item) =>\r\n          item.id === product.id &&\r\n          item.selectedSize === product.selectedSize &&\r\n          item.selectedColor === product.selectedColor &&\r\n          item.selectedCapacity === product.selectedCapacity &&\r\n          item.selectedTouchID === product.selectedTouchID &&\r\n          item.selectedUSBPorts === product.selectedUSBPorts\r\n      );\r\n  \r\n      if (existingItemIndex > -1) {\r\n        // Item already exists, increase quantity\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[existingItemIndex] = {\r\n          ...updatedItems[existingItemIndex],\r\n          quantity: updatedItems[existingItemIndex].quantity + 1,\r\n        };\r\n        return updatedItems;\r\n      }\r\n  \r\n      // New item, add to cart\r\n      return [...prevItems, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  // Remove item from cart or decrease quantity\r\n  const removeFromCart = (id, size, color, capacity, touchID, usbPorts) => {\r\n    setCartItems((prevItems) => {\r\n      const existingItemIndex = prevItems.findIndex(\r\n        (item) =>\r\n          item.id === id &&\r\n          item.selectedSize === size &&\r\n          item.selectedColor === color &&\r\n          item.selectedCapacity === capacity &&\r\n          item.selectedTouchID === touchID &&\r\n          item.selectedUSBPorts === usbPorts\r\n      );\r\n  \r\n      if (existingItemIndex > -1) {\r\n        const updatedItems = [...prevItems];\r\n        const item = updatedItems[existingItemIndex];\r\n  \r\n        if (item.quantity > 1) {\r\n          // Decrease quantity\r\n          updatedItems[existingItemIndex] = {\r\n            ...item,\r\n            quantity: item.quantity - 1,\r\n          };\r\n        } else {\r\n          // Remove item completely if quantity is 1\r\n          updatedItems.splice(existingItemIndex, 1);\r\n        }\r\n  \r\n        return updatedItems;\r\n      }\r\n  \r\n      return prevItems;\r\n    });\r\n  };\r\n\r\n  // Update attributes of a cart item\r\n  const updateCartItemAttributes = (id, updatedAttributes) => {\r\n    setCartItems((prevItems) => {\r\n      const itemIndex = prevItems.findIndex((item) => item.id === id);\r\n      if (itemIndex !== -1) {\r\n        const updatedItems = [...prevItems];\r\n        updatedItems[itemIndex] = {\r\n          ...updatedItems[itemIndex],\r\n          ...updatedAttributes,  // Apply the updated attributes\r\n        };\r\n        return updatedItems;\r\n      }\r\n      return prevItems;\r\n    });\r\n  };\r\n\r\n  // Clear the cart after placing an order\r\n  const clearCart = () => {\r\n    setCartItems([]); // Clear the cart items\r\n    localStorage.removeItem('cart'); // Optionally clear from localStorage too\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cartItems,\r\n        addToCart,\r\n        removeFromCart,\r\n        updateCartItemAttributes,  // Expose the new function\r\n        getTotalItems,\r\n        getTotalPrice,\r\n        clearCart, // Expose clearCart function\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}